-- ----------------------------------------------------------------------------------------------------------------
-- FUNCTIONS
-- ----------------------------------------------------------------------------------------------------------------

-- FOR USING ORA HASH TO STORE PASSWORD

DROP TABLE "GAME_SITE"."USER_CREDENTIAL";
CREATE TABLE "GAME_SITE"."USER_CREDENTIAL"(
   "EMAIL" VARCHAR2(255 BYTE) VISIBLE NOT NULL,
   "PASSWORD" VARCHAR2(255 BYTE) VISIBLE NOT NULL,
   HASHED_PASSWORD NUMBER,
   CONSTRAINT "USER_CREDENTIAL_PKEY" PRIMARY KEY("EMAIL")
);

INSERT INTO "GAME_SITE"."USER_CREDENTIAL" ("EMAIL","PASSWORD") VALUES ('user1', 'password123');
INSERT INTO "GAME_SITE"."USER_CREDENTIAL" ("EMAIL","PASSWORD") VALUES ('user2', 'securepass456');

UPDATE "GAME_SITE"."USER_CREDENTIAL"
SET HASHED_PASSWORD = ORA_HASH("PASSWORD",4294967295);

--FUNCTION FOR MATCHING USERNAME WITH PASSWORD

CREATE OR REPLACE FUNCTION VALID_USER (INPUT_EMAIL IN VARCHAR2(255), PASS IN VARCHAR2(255)) RETURN VARCHAR2 IS 
DECLARE
    HASHED_INPUT NUMBER;
    MSG VARCHAR2(255);
BEGIN
    -- Calculate the hash of the input password
    HASHED_INPUT:= ORA_HASH(PASS, 1);

    -- Check if the hashed input matches the stored hash
    IF HASHED_INPUT = (SELECT HASHED_PASSWORD FROM "GAME_SITE"."USER_CREDENTIAL"  WHERE EMAIL=INPUT_EMAIL ) THEN
        MSG:='Login successful';
    ELSE
        MSG:='Login failed';
    END IF;
   RETURN MSG;
END;

-- -----------------------------------------------------------------------------------------------------------------
-- PROCEDURE
-- -----------------------------------------------------------------------------------------------------------------

-- PROCEDURE FOR CALCULATE OVERALL RATING OF GAME TABLE
CREATE OR REPLACE PROCEDURE TORAL_RATING (GID IN NUMBER, TOTAL_RATING OUT NUMBER)
    NO_OF_RATING NUMBER;
    RATING NUMBER;
BEGIN 
	RATING:=0;
	NO_OF_RATING:=0;
	FOR X IN (SELECT R.PERSONID ,R.RATING FROM REVIEWS r WHERE R.GAMEID=GID)
	LOOP 
		RATING := RATING+X.RATING;
		NO_OF_RATING:=NO_OF_RATING+1;
	END LOOP;
    TOTAL_RATING= RATING/NUMBER_OF_RATING;
END;

-- -----------------------------------------------------------------------------------------------------------------
-- TRIGGER
-- -----------------------------------------------------------------------------------------------------------------

-- TRIGGER FOR UPDATING REVIEWS COUNT ON GAME TABLE AFTER AN INSERT OR DELETE ON REVIEWS TABLE
CREATE OR REPLACE TRIGGER UPDATE_REVIEWS_COUNT
AFTER INSERT OR DELETE 
ON "GAME_SITE".REVIEWS 
DECLARE 
  GID NUMBER; 
  G_ID NUMBER;
  CNT NUMBER(10,0);
BEGIN
    FOR Y IN (SELECT G.ID INTO GID FROM GAME g)
	LOOP 
		CNT:=0;
	    FOR X IN (SELECT R.GAMEID,R.PERSONID FROM REVIEWS r )
	    LOOP 
		    G_ID:= X.GAMEID ;
		    IF GID= G_ID 
		       CNT:= CNT+1;
		    END IF;  
	    END LOOP;
	   UPDATE "GAME_SITE".GAME 
	   SET G.REVIEWS_COUNT =CNT 
	   WHERE ID = GID;
	END LOOP;
END;

-- TRIGGER FOR CALCULATING RATING AFTER A NEW RATING COMES IN REVIEW_TABLE ON GAME_TABLE
CREATE OR REPLACE TRIGGER CALCULATE_RATING 
AFTER INSERT OR UPDATE OR DELETE 
OF RATING
ON "GAME_SITE".REVIEWS 
DECLARE 
  GID NUMBER; 
  G_ID NUMBER;
  RATE NUMBER;
  NO_OF_RATE NUMBER;
  C_RATING NUMBER;
BEGIN
	FOR Y IN (SELECT G.ID INTO GID FROM GAME g)
	LOOP 
		SELECT G2.RATING INTO RATE FROM GAME g2 WHERE G2.ID = GID;
        SELECT G3.RATINGS_COUNT INTO NO_OF_RATE FROM GAME g3 WHERE G3.ID =GID;
        C_RATING:= (RATE*NO_OF_RATE)+RATING;
        C_RATING:= C_RATING/(NO_OF_RATING+1);
        UPDATE "GAME_SITE".GAME 
	    SET G.RATING = C_RATING
	    WHERE ID = GID;
	END LOOP;
END;

-- TRIGGER FOR UPDATING GAMES_COUNT OF PUBLISHER TABLE
CREATE OR REPLACE TRIGGER UPDATE_GAMES_COUNT_FOR_PUBLISHER 
AFTER INSERT OR DELETE OR UPDATE 
OF PUBLISHERID
ON "GAME_SITE".GAME 
DECLARE 
  PUB_ID NUMBER;
  CNT NUMBER;
BEGIN 
	FOR Y IN (SELECT G.PUBLISHERID  INTO PUB_ID FROM GAME g)
	LOOP 
		CNT:=0;
	    FOR X IN (SELECT G2.ID FROM GAME g2 WHERE G2.PUBLISHERID=PUB_ID)
	    LOOP 
		    CNT:= CNT+1;
	    END LOOP;
	    UPDATE "GAME_SITE".PUBLISHER P
	    SET P.GAMES_COUNT = CNT
	    WHERE P.ID = PUB_ID;
	END LOOP;
END;

-- TRIGGER FOR UPDATING GAMES_COUNT OF STORE TABLE
CREATE OR REPLACE TRIGGER UPDATE_GAMES_COUNT_FOR_STORE
AFTER INSERT OR DELETE OR UPDATE 
OF STORE_ID
ON "GAME_SITE".GAME_STORE  
DECLARE 
  ST_ID NUMBER;
  CNT NUMBER;
BEGIN 
	FOR Y IN (SELECT GS.STORE_ID  INTO ST_ID FROM GAME_STORE gs)
	LOOP 
		SELECT COUNT(GS2.GAMEID) INTO CNT FROM GAME_STORE gs2 WHERE GS2.STORE_ID = ST_ID;
	    UPDATE "GAME_SITE".STORE S
	    SET S.GAMES_COUNT = CNT
	    WHERE S.ID = ST_ID;
	END LOOP;
END;

-- TRIGGER FOR UPDATING GAMES_COUNT OF PLATFORM
CREATE OR REPLACE TRIGGER UPDATE_GAMES_COUNT_FOR_PLATFORM
AFTER INSERT OR UPDATE OR DELETE 
OF PLATFORMID
ON "GAME_SITE".PLATFORM_ON_GAMES 
DECLARE 
   PLT_ID VARCHAR2(255);
   CNT NUMBER;
BEGIN 
	FOR Y IN (SELECT P2.ID INTO PLT_ID FROM PLATFORM p2 )
	LOOP 
		CNT:=0;
	    FOR X IN (SELECT * FROM PLATFORM P3 WHERE P3.ID= PLT_ID)
        LOOP 
    	    CNT:= CNT+1;
        END LOOP;
        UPDATE "GAME_SITE".PLATFORM PT
	    SET PT.GAMES_COUNT = CNT
	    WHERE PT.ID  = PLT_ID;
	END LOOP;
END;

-- TRIGGER FOR UPDATING COMMENTS_COUNT OF NEWS TABLE
CREATE OR REPLACE TRIGGER UPDATE_COMMENTS_COUNT_OF_NEWS
AFTER INSERT OR DELETE 
ON "GAME_SITE".COMMENTS 
DECLARE 
   NID NUMBER;
   CNT NUMBER;
BEGIN 
	FOR Y IN (SELECT N.ID INTO NID FROM NEWS n  )
	LOOP 
		SELECT COUNT(C.NEWSID) INTO CNT
	    FROM NEWS n2 JOIN COMMENTS c ON C.NEWSID =N2.ID
	    WHERE N2.ID =NID;
	    UPDATE "GAME_SITE".NEWS N3
	    SET N3.COMMENTS_COUNT = CNT 
	    WHERE N3.ID = NID;
	END LOOP;  
END;

